import logging
import asyncio
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes, \
    ConversationHandler
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
import random
from config import BOT_TOKEN
import json
import time
import datetime
import requests
import base64


class Text2ImageAPI:
    def __init__(self, url, api_key, secret_key):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

    def get_model(self):
        response = requests.get(self.URL + 'key/api/v1/models', headers=self.AUTH_HEADERS)
        data = response.json()
        return data[0]['id']

    def generate(self, prompt, model, width=1024, height=1024, images=1):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": f"{prompt}"
            }
        }

        data = {
            'model_id': (None, model),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/text2image/run', headers=self.AUTH_HEADERS, files=data)
        data = response.json()
        return data['uuid']

    def check_generation(self, request_id, attempts=10, delay=5):
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/text2image/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            if data['status'] == 'DONE':
                return data['images']

            attempts -= 1
            time.sleep(delay)


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)
FAQKeyboard = [
    [
        InlineKeyboardButton("üé®–°—Ç–∏–ª–∏", callback_data="styles")
    ],
    # [
    #     InlineKeyboardButton("üí™üèª–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ë–æ—Ç–∞", callback_data="2")
    # ],
    [
        InlineKeyboardButton("‚úèÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="requests")
    ],
    [
        InlineKeyboardButton("ü§ñ–û –ë–æ—Ç–µ", callback_data="obote")
    ],
    [
        InlineKeyboardButton("üìÑ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="desciption"),
    ],
    [
        InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ ‚úÖ", callback_data="exit")
    ],
]
nazad = [[InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ ‚úÖ", callback_data="–ù–∞–∑–∞–¥")]]


async def faq(update, context):
    print(update.message)
    if update.message != None:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(FAQKeyboard))
    else:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                                      reply_markup=InlineKeyboardMarkup(FAQKeyboard))


async def button_faq(update, context):
    query = update.callback_query
    await query.answer()

    if query.data in 'styles–ù–∞–∑–∞–¥S':
        styles = [x for x in requests.get('https://cdn.fusionbrain.ai/static/styles/api').json()]
        s = '–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∏–ª–µ–π, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:\n'
        reqget = [x['title'] for x in styles]
        spisok = ([InlineKeyboardButton(reqget[i], callback_data=reqget[i])] for i in range(len(reqget)))
        key1 = [*spisok, [InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")]]

    if query.data == 'styles':
        await query.edit_message_text(s, reply_markup=InlineKeyboardMarkup(key1))

    elif query.data in ['–ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π', "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ", "–ê–Ω–∏–º–µ", "–°–≤–æ–π —Å—Ç–∏–ª—å"]:
        await FAQstyles(update, context)

    # elif query.data == '2':
    #     await query.edit_message_text("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ë–æ—Ç–∞", reply_markup=InlineKeyboardMarkup(nazad))

    elif query.data == 'requests':
        await FAQReq(update, context)

    elif query.data == 'obote':
        await FAQBote(update, context)

    elif query.data == 'desciption':
        await FAQUsAg(update, context)

    elif query.data == 'exit':
        await query.delete_message()

    elif query.data == '–ù–∞–∑–∞–¥':
        await faq(update, context)

    elif query.data == "–ù–∞–∑–∞–¥S":
        await query.message.reply_text(s, reply_markup=InlineKeyboardMarkup(key1))
        await query.delete_message()


async def FAQBote(update, context):
    s = '''   –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å—Ç–∏ Kandinsky, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–π @kandinsky21_bot.
   –í–µ—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –±–æ—Ç–∞ —É—Ä–µ–∑–∞–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º API Kandinsky, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ FusionBrain.ai.
   –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–∑ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ:
        ‚Ä¢–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
   –î–ª—è –±–æ–ª—å—à–µ–≥–æ - –ø–æ—Å–µ—Ç–∏—Ç–µ fusionbrain.ai
            '''
    query = update.callback_query
    await query.edit_message_text(s, reply_markup=InlineKeyboardMarkup(nazad))


async def FAQReq(update, context):
    mes = """–ï—Å—Ç—å –º–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª, –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:
    ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É ‚Äí –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å
    ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—É –∏–ª–∏ –æ–±—ä–µ–∫—Ç ‚Äí –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
    ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π ‚Äí —á–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º
    ‚Ä¢ –ë–æ–ª—å—à–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ [skillbox\.ru](https://skillbox.ru/media/code/prompty-dlya-neyrosetey-kak-pravilno-pisat-zaprosy-k-chatgpt-i-drugim-neyronnym-setyam/)
    """
    query = update.callback_query
    await query.edit_message_text(mes, parse_mode='MarkdownV2', disable_web_page_preview=True,
                                  reply_markup=InlineKeyboardMarkup(nazad))


async def FAQUsAg(update, context):
    mes = '''   –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º
    
   –ù–∞—á–∏–Ω–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º‚Äí–±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://www.sberbank.com/common/img/uploaded/files/promo/kandinskiy-terms/kandinskiy-terms-of-use.pdf) –∏ [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://www.sberbank.ru/privacy/policy#pdn)
   –û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∞ —Ç–∞–∫–∂–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ, –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏, –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –æ–±—â–µ–ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –Ω–æ—Ä–º—ã

   –í—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ª–µ–∂–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
'''
    query = update.callback_query
    await query.edit_message_text(mes, parse_mode='MarkdownV2', disable_web_page_preview=True,
                                  reply_markup=InlineKeyboardMarkup(nazad))


async def FAQstyles(update, context):
    query = update.callback_query
    nazads = [[InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥S")]]
    image_get = requests.get("https://cdn.fusionbrain.ai/static/styles/api").json()
    await query.delete_message()
    if query.data == image_get[0]["title"]:
        await query.message.reply_photo(image_get[0]["image"], "–ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π\n–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å",
                                        reply_markup=InlineKeyboardMarkup(nazads))
    elif query.data == image_get[1]["title"]:
        await query.message.reply_photo(image_get[1]["image"],
                                        "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ\n–°—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                        reply_markup=InlineKeyboardMarkup(nazads))
    elif query.data == image_get[2]["title"]:
        await query.message.reply_photo(image_get[2]["image"], "–ê–Ω–∏–º–µ\n–°—Ç–∏–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ",
                                        reply_markup=InlineKeyboardMarkup(nazads))
    elif query.data == image_get[3]["title"]:
        await query.message.reply_photo(image_get[3]["image"],
                                        "–°–≤–æ–π —Å—Ç–∏–ª—å\n–°—Ç–∏–ª—å —Å–æ —Å–≤–æ–±–æ–¥–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ç–æ –∏ –ª–µ–ø–∏—Ç–µ!",
                                        reply_markup=InlineKeyboardMarkup(nazads))


async def start(update, context):
    markup = ReplyKeyboardMarkup([['–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'], ['–ü–æ–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä']], one_time_keyboard=True,
                                 resize_keyboard=True)
    await update.message.reply_text('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)


async def text(update, context):
    global size
    if update.message.text == '–ü–æ–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä':
        await size_image(update, context)
    elif update.message.text == '768x1024':
        size = (768, 1024)
        await update.message.reply_text('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 768x1024')
        await close(update, context)
    elif update.message.text == '1024x768':
        size = (1024, 768)
        await update.message.reply_text('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 1024x768')
        await close(update, context)
    elif update.message.text == '1024x1024':
        size = (1024, 1024)
        await update.message.reply_text('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 1024x1024')
        await close(update, context)
    else:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /image <something> –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')


async def generate_image(update, context):
    promt = ' '.join(context.args)
    await update.message.reply_text(f'–î–µ–ª–∞–µ—Ç—Å—è "{promt}"')
    api = Text2ImageAPI('https://api-key.fusionbrain.ai/', '9E9E96FF8D8E84CA66468EE4299FA764',
                        'A518C79988CAA90C30C976EA5B4C05B0')
    model_id = api.get_model()
    global size
    x, y = size
    uuid = api.generate(f"{promt}", model_id, width=x, height=y)
    images = api.check_generation(uuid)
    l = '''image\\{(datetime.date.today())}\\{datetime.datetime.now().strftime('%H-%M-%S')}.png'''
    with open(f"image\\generation.png", "wb") as file:
        file.write(base64.b64decode(images[0]))

    await update.message.reply_photo(open(f"image\\generation.png", "rb"))


async def size_image(update, context):
    markup = ReplyKeyboardMarkup([['768x1024', '1024x768', '1024x1024']], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä?', reply_markup=markup)


async def close(update, context):
    await start(update, context)


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text))
    global size
    size = (1024, 1024)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("size", size_image))
    application.add_handler(CommandHandler("faq", faq))
    application.add_handler(CallbackQueryHandler(button_faq))
    application.add_handler(CommandHandler("image", generate_image))
    application.add_handler(CommandHandler("close", close))
    application.run_polling()


if __name__ == '__main__':
    main()
    # https://t.me/yalic_bot
